#version 430
#extension GL_EXT_geometry_shader4 : enable

#define CAPS 1
#define CAP_TYPE 0

//***** begin interface of view.glsl ***********************************
mat4 get_modelview_matrix();
mat4 get_projection_matrix();
mat4 get_modelview_projection_matrix();
mat4 get_inverse_modelview_matrix();
mat4 get_inverse_modelview_projection_matrix();
mat3 get_normal_matrix();
mat3 get_inverse_normal_matrix();
//***** end interface of view.glsl ***********************************

uniform int   nr_samples;

//***** begin interface of hyperbolic.glsl ***********************************
vec4 hyperbolic_project(in vec4 p);
vec4 hyperbolic_transform(in vec4 x);
vec4 hyperbolic_mixture(in vec4 x, float t, in vec4 y);
//***** end interface of hyperbolic.glsl ***********************************


layout(lines) in;
layout(triangle_strip, max_vertices = 14) out;

in vec4 color_gs[];
in int instance_idx[];
in float w_comp[];

out vec3 position;
out flat vec4 start_fs;
out flat vec4 end_fs;
out flat vec3 normal_fs;
out flat vec3 binormal_fs;
out flat vec4 color_start_fs;
out flat vec4 color_end_fs;

vec3 ortho_vec(vec3 v) {

	return abs(v.x) > abs(v.z) ? vec3(-v.y, v.x, 0.0f) : vec3(0.0f, -v.z, v.y);
}

void main()
{
	vec4 p0 = hyperbolic_transform(vec4(gl_in[0].gl_Position.xyz, w_comp[0]));
	vec4 p1 = hyperbolic_transform(vec4(gl_in[1].gl_Position.xyz, w_comp[1]));
	float s = 1.0f / float(nr_samples);
	float t0 = s*float(instance_idx[0]);
	vec4 q0 = hyperbolic_project(hyperbolic_mixture(p0, t0, p1));
	vec4 q1 = hyperbolic_project(hyperbolic_mixture(p0, t0+s, p1));
	vec4 start = vec4(q0.xyz, q0.w*gl_in[0].gl_Position.w);
	vec4 end   = vec4(q1.xyz, q1.w*gl_in[1].gl_Position.w);
	float l = length(end.xyz - start.xyz);
	vec3 delta = (end.xyz - start.xyz) / l;

	float rs = start.w;
	float re = end.w;

	float max_d = 2 * max(rs, re);

	vec3 center = start.xyz + end.xyz;
#if CAP_TYPE == 1
	center += delta*(re - rs);
#endif
	center *= 0.5;

	// create transformation matrix as modelview * translation * rotation * scale
	// rotation part
	mat4 T = mat4(1.0);
	T[0] = vec4(delta, 0.0);
	T[1] = vec4(normalize(ortho_vec(delta)), 0.0);
	T[2] = vec4(cross(delta, T[1].xyz), 0.0);
	T[3] = vec4(center, 1.0); // translation part

	// get tangent frame from rotation matrix before scaling is applied
	normal_fs = T[1].xyz;
	binormal_fs = T[2].xyz;

	// scale part
#if CAP_TYPE == 1
	T[0] *= l + rs + re;
	T[1] *= max_d;
	T[2] *= max_d;
#else
	T[0] *= l;
#endif

	// transform to eye space
	mat4 M = get_modelview_matrix() * T;
	
	// transform cone start and end position to eye space
	//start_fs = vec4((get_modelview_matrix() * vec4(start.xyz, 1.0)).xyz, start.w);
	//end_fs = vec4((get_modelview_matrix() * vec4(end.xyz, 1.0)).xyz, end.w);
	start_fs = start;
	end_fs = end;

	color_start_fs = color_gs[0];
	color_end_fs = color_gs[1];

	//uu = aligned_up;
	//vv = cross(aligned_up, delta);

	/*
	vec4 C0 = M * vec4(-0.5, -0.5, -0.5, 1.0);
	vec4 C1 = M * vec4(0.5, -0.5, -0.5, 1.0);
	vec4 C2 = M * vec4(-0.5, 0.5, -0.5, 1.0);
	vec4 C3 = M * vec4(0.5, 0.5, -0.5, 1.0);
	vec4 C4 = M * vec4(-0.5, -0.5, 0.5, 1.0);
	vec4 C5 = M * vec4(0.5, -0.5, 0.5, 1.0);
	vec4 C6 = M * vec4(-0.5, 0.5, 0.5, 1.0);
	vec4 C7 = M * vec4(0.5, 0.5, 0.5, 1.0);
	*/

	// generate transformed base vector corners of the box
#if CAP_TYPE == 0
	vec4 C0 = M * vec4(-0.5, -rs, -rs, 1.0);
	vec4 C1 = M * vec4(-0.5, -rs, +rs, 1.0);
	vec4 C2 = M * vec4(-0.5, +rs, -rs, 1.0);
	
	vec4 C4 = M * vec4(+0.5, -re, -re, 1.0);
	vec4 C5 = M * vec4(+0.5, -re, +re, 1.0);
	vec4 C6 = M * vec4(+0.5, +re, -re, 1.0);
	
	// calculate remaining corners
	vec4 C3 = C1 + C2 - C0;
	vec4 C7 = C5 + C6 - C4;
#else
	vec4 C0 = M * vec4(-0.5, -0.5, -0.5, 1.0);
	vec4 C1 = M * vec4(0.5, -0.5, -0.5, 1.0);
	vec4 C2 = M * vec4(-0.5, 0.5, -0.5, 1.0);
	vec4 C4 = M * vec4(-0.5, -0.5, 0.5, 1.0);

	// calculate remaining corners
	vec4 D20 = C2 - C0;

	vec4 C3 = C1 + D20;
	vec4 C5 = C1 + C4-C0;
	vec4 C6 = C4 + D20;
	vec4 C7 = C5 + D20;
#endif
	
	mat4 PM = get_projection_matrix();

	position = C6.xyz;
	gl_Position = PM * C6;
	EmitVertex();

	position = C7.xyz;
	gl_Position = PM * C7;
	EmitVertex();

	position = C4.xyz;
	gl_Position = PM * C4;
	EmitVertex();

	position = C5.xyz;
	gl_Position = PM * C5;
	EmitVertex();

	position = C1.xyz;
	gl_Position = PM * C1;
	EmitVertex();

	position = C7.xyz;
	gl_Position = PM * C7;
	EmitVertex();
	
	position = C3.xyz;
	gl_Position = PM * C3;
	EmitVertex();
	
	position = C6.xyz;
	gl_Position = PM * C6;
	EmitVertex();
	
	position = C2.xyz;
	gl_Position = PM * C2;
	EmitVertex();
	
	position = C4.xyz;
	gl_Position = PM * C4;
	EmitVertex();
	
	position = C0.xyz;
	gl_Position = PM * C0;
	EmitVertex();
	
	position = C1.xyz;
	gl_Position = PM * C1;
	EmitVertex();
	
	position = C2.xyz;
	gl_Position = PM * C2;
	EmitVertex();
	
	position = C3.xyz;
	gl_Position = PM * C3;
	EmitVertex();

	EndPrimitive();
}
